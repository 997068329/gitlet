* Running git init is idempotent.  The real behaviour is not idempotent, but it is as far as the features of gitlet are concerned: https://www.kernel.org/pub/software/scm/git/docs/git-init.html
* no description file
* only well-formed -w like command-line flags, and each one separate: -w -b, and no data for any args
* hash function as simple as possible for brevity - real git uses sha1
* prob no packfiles
* prob no support for wildcard paths in git add
* do not support --remove for update-index so no mention of it when trying to update-index w non existent path
* assume all things inside repos are dirs or files
* artificially lock refs creation to HEAD and refs/heads/[whatever] - otherwise have to protect other files and deal with different messages for eg overwriting dirs vs trying to overwrite files like index that git relies on
* do not support hash abreviations
* no diffing so no summory of changes on commit
* update-ref only takes full ref for first arg (no branch names).  Real behaviour is to take relative paths allow creation of refsjust create files relative
* only support HEAD for symbolic ref
* do not support non-symbolic (non HEAD) refs pointing at other refs
* update-ref supports branch name for second arg
* all flags w/o values come at end of command when run from command line (eg node gitlet.js hash-object file.txt -w) so that we don't need per-command command line arg parsing
* diff cannot take paths, only refs and hashes (eg can't take git diff master:src/ or git diff src/)
* complain if do echo a > a; git add a; rm a; git add a; - git 1.8.2.3 does not complain that file does not exist, presumably because it is in the index.  git 2.0 will complain.

todo
* cd back to repo root for all commands
* sort out which unexpected results to throw for and which to just print for: error, fatal, or just message (eg commit when nothing to commit)
* support detached head
* test committing when other branch checked out
* make sure merge does two parents
* use same quote style throughout
* shorten error messages - no need to ape the git ones fully
* split files into files and workingcopy
* model refs/trees/commits/blobs as objs w/ methods?
* remove code that allows diffing/checking out a tree
* finish tests in commit.spec
* look for other unfinished tests
* rm js from all instances of node gitlet.js
* git status?
