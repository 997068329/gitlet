* Running git init is idempotent.  The real behaviour is not idempotent, but it is as far as the features of gitlet are concerned: https://www.kernel.org/pub/software/scm/git/docs/git-init.html
* no description file
* only well-formed -w like command-line flags, and each one separate: -w -b
* hash function as simple as possible for brevity - real git uses sha1
* prob no packfiles
* prob no support for wildcard paths in git add
* do not support --remove for update-index so no mention of it when trying to update-index w non existent path
* assume all things inside repos are dirs or files
* artificially lock refs creation to HEAD and refs/heads/[whatever] - otherwise have to protect other files and deal with different messages for eg overwriting dirs vs trying to overwrite files like index that git relies on
* do not support hash abreviations
* no diffing so no summory of changes on commit
* update-ref only takes full ref for first arg (no branch names).  Real behaviour is to take relative paths allow creation of refsjust create files relative
* only support HEAD for symbolic ref
* do not support non-symbolic (non HEAD) refs pointing at other refs
* update-ref supports branch name for second arg
* all flags w/o values come at end of command when run from command line (eg node gitlet.js hash-object file.txt -w) so that we don't need per-command command line arg parsing
* diff cannot take paths, only refs and hashes (eg can't take git diff master:src/ or git diff src/)
* complain if do echo a > a; git add a; rm a; git add a; - git 1.8.2.3 does not complain that file does not exist, presumably because it is in the index.  git 2.0 will complain.
* not supporting git checkout HEAD
* not supporting error message if try and checkout to branch already on
* only checking basic validity of args passed to main git fns when it illustrates something about how git works.  eg don't check for undefined but do check that --add there if file not in index
* only allow repo interop via cp - no network support
* only support setting up remote tracking (branch -u) for current branch
* support three-way merge, but not recursive merge
* pushing to non-bare repo completely disallowed (no transfer of objects, no flag to enable it)
* repeatedly checking out same commit or same branch seem to do nothing (no change to index which DOES happen if you checkout normally).  They have a different message, but I've made it the same for both.
* when rming a set of files that include both staged and unstaged changes, print them all in a single list

todo
* stop api commands returning newlines - make cli runner add them
* reclocate checkout fns
* cd back to repo root for all commands
* git status?
* check all file ops are done on absolute paths
* check fetch works for merge commits
* use update_ref to update remote refs
* fix heads being written w/o a newline
* cannot add config to an empty-with-a-newline config file
* merge for non-conflicted files
* init --bare
* git pull origin master
* git push origin master
* merge for conflicted files
* block pushing to non bare repo
* remove test index reader and use real one
* see if "." works as a path?
